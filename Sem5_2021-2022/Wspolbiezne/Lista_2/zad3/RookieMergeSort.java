

class Counter {
    private int max;
    private int value;
    
    Counter(int max) {
        this.max = max;
        this.value = 0; 
    }

    public synchronized int getIncrement() {
        if (value == max)
            return -1; 
        System.out.println("Number of threads: " + (value+1));
        return value++;
    }

    public synchronized int getDecrement() {
        System.out.println("Number of threads: " + (value-1));
        return value--;
    }
}

class MergeSort implements Runnable {
    protected Counter counter;
    protected int arr[];
    protected int l, r;

    MergeSort(Counter counter, int arr[], int l, int r) {
        this.counter = counter;
        this.arr = arr;
        this.l = l;
        this.r = r;
    }

    private synchronized void merge(int l, int m, int r) {
        int n_left = m - l + 1;
        int n_right = r - m;
        int[] left = new int[n_left];
        int[] right = new int[n_right];

        for (int i = 0; i < n_left; i++) {
            left[i] = arr[l + i];
        }
        for (int i = 0; i < n_right; i++) {
            right[i] = arr[m + 1 + i];
        }
        int i = 0, j = 0;
        int k = l;
        while (i < n_left && j < n_right) {
            if (left[i] <= right[j]) {
                arr[k] = left[i];
                i++;
            } else {
                arr[k] = right[j];
                j++;
            }
            k++;
        }
        while (i < n_left) {
            arr[k] = left[i];
            k++;
            i++;
        }
        while (j < n_right) {
            arr[k] = right[j];
            k++;
            j++;
        }
    }

    public void sort(int l, int r) {
        if (l < r) {
            int m = (l + r) / 2;
            sort(l, m);
            sort(m + 1, r);
            merge(l, m, r);
        }
    }

    @Override
    public void run() {
        if (this.l < this.r) {
            int m = (this.l + this.r) / 2;
            if (counter.getIncrement() != -1) {
                MergeSort left = new MergeSort(counter, arr, this.l, m);
                Thread t1 = new Thread(left);
                t1.start();
                sort(m + 1, this.r);
                try {
                    t1.join();
                    counter.getDecrement();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            else {
                sort(this.l, m);
                sort(m + 1, this.r);
            }
            this.merge(this.l, m, this.r);
        }
    }
}


public class RookieMergeSort {

    public static void main(String[] args) {
        Counter  counter = new Counter(10);
        int arr[] = { -1, 50, 662, 910, 616, 813, 300, 21, 123, 499, 963, 121, 372, 165, 246, 630, 650, 305, 867, 191, 817, 612, 321, 581, 1, 982, 772, 97, 982, 668, 58, 213, 929, 414, 283, 710, 456, 222, 620, 840, 418, 41, 516, 519, 242, 452, 847, 303, 407, 837, 685, 284, 336, 898, 530, 452, 458, 341, 493, 881, 572, 55, 129, 169, 974, 104, 47, 481, 575, 217, 27, 304, 784, 62, 540, 224, 310, 61, 394, 850, 715, 997, 242, 185, 902, 318, 196, 952, 232, 673, 786, 395, 71, 283, 770, 345, 894, 579, 258, 760, 984, 341, 961, 274, 73, 697, 558, 499, 442, 200, 862, 950, 34, 223, 287, 425, 102, 306, 567, 589, 283, 715, 659, 1000, 185, 710, 639, 935, 741, 197, 733, 472, 11, 73, 888, 560, 489, 984, 53, 330, 360, 598, 262, 172, 485, 491, 833, 189, 566, 612, 319, 579, 961, 580, 648, 919, 260, 829, 841, 422, 497, 626, 623, 216, 801, 225, 873, 556, 54, 4, 29, 445, 61, 276, 100, 293, 274, 647, 972, 579, 55, 308, 229, 319, 579, 837, 865, 593, 993, 801, 762, 201, 777, 765, 665, 143, 856, 940, 322, 225, 321, 965, 461, 521, 872, 568, 719, 893, 380, 440, 93, 129, 772, 811, 366, 612, 596, 79, 982, 448, 632, 976, 333, 467, 649, 613, 102, 440, 909, 805, 516, 39, 943, 534, 116, 686, 929, 451, 912, 868, 665, 701, 396, 84, 967, 108, 629, 851, 45, 862, 774, 726, 362, 853, 239, 881, 93, 885, 795, 299, 658, 630, 386, 102, 562, 189, 821, 955, 276, 304, 440, 347, 815, 760, 407, 407, 734, 235, 28, 938, 61, 589, 538, 214, 424, 284, 524, 51, 796, 273, 711, 795, 299, 745, 28, 530, 47, 363, 488, 532, 963, 953, 17, 452, 122, 371, 981, 910, 984, 370, 283, 974, 80, 143, 842, 490, 889, 242, 418, 465, 414, 250, 73, 916, 802, 156, 385, 563, 22, 406, 410, 669, 147, 726, 404, 263, 859, 846, 391, 706, 825, 333, 932, 178, 749, 938, 880, 823, 41, 916, 450, 944, 614, 521, 607, 624, 650, 265, 793, 770, 468, 204, 331, 24, 817, 425, 571, 289, 529, 338, 378, 753, 614, 140, 285, 282, 995, 121, 556, 417, 346, 73, 801, 377, 312, 234, 930, 325, 502, 730, 130, 468, 842, 420, 150, 79, 787, 842, 776, 670, 299, 652, 992, 384, 444, 272, 978, 296, 750, 469, 507, 124, 688, 760, 724, 417, 859, 143, 630, 983, 283, 495, 92, 556, 454, 902, 896, 58, 680, 974, 131, 815, 459, 511, 972, 275, 199, 99, 511, 389, 570, 606, 854, 279, 982, 514, 160, 746, 11, 830, 930, 353, 57, 844, 685, 966, 664, 802, 72, 509, 64, 961, 595, 306, 219, 500, 255, 407, 700, 226, 641, 383, 339, 864, 673, 475, 313, 634, 733, 55, 645, 692, 92, 713, 933, 4, 476, 287, 871, 554, 214, 671, 851, 791, 339, 960, 382, 718, 460, 984, 258, 281, 800, 635, 339, 733, 362, 596, 357, 791, 329, 707, 615, 801, 853, 480, 446, 904, 225, 857, 263, 442, 593, 407, 234, 791, 932, 279, 412, 555, 168, 602, 122, 950, 339, 269, 390, 994, 520, 234, 325, 582, 120, 655, 342, 44, 322, 597, 627, 714, 565, 989, 67, 526, 472, 447, 865, 76, 542, 502, 257, 178, 342, 55, 122, 848, 569, 676, 758, 562, 549, 21, 260, 264, 230, 248, 90, 231, 244, 827, 254, 5, 518, 113, 479, 289, 88, 631, 193, 913, 258, 676, 873, 656, 85, 252, 295, 591, 398, 433, 463, 11, 459, 731, 146, 846, 506, 780, 206, 397, 646, 675, 231, 222, 126, 597, 620, 590, 227, 966, 531, 604, 983, 278, 55, 105, 27, 244, 156, 373, 201, 201, 755, 338, 754, 954, 464, 307, 707, 178, 550, 152, 227, 570, 156, 989, 69, 88, 809, 140, 327, 513, 811, 151, 118, 45, 7, 956, 704, 246, 308, 802, 694, 726, 888, 31, 856, 533, 972, 871, 717, 953, 908, 427, 510, 816, 974, 660, 647, 277, 450, 759, 740, 695, 814, 513, 846, 957, 222, 255, 562, 848, 561, 502, 506, 123, 435, 78, 545, 712, 697, 278, 262, 769, 239, 112, 516, 4, 912, 328, 531, 315, 271, 160, 781, 720, 841, 481, 178, 788, 442, 51, 233, 127, 581, 749, 834, 486, 746, 542, 334, 27, 105, 32, 992, 124, 445, 890, 184, 962, 663, 377, 6, 318, 563, 687, 936, 920, 119, 167, 340, 581, 654, 15, 210, 825, 600, 241, 209, 342, 660, 218, 316, 669, 914, 299, 479, 434, 199, 911, 98, 531, 34, 793, 716, 230, 944, 487, 875, 142, 727, 860, 682, 91, 121, 647, 389, 479, 910, 908, 398, 169, 767, 440, 314, 338, 667, 775, 296, 829, 494, 275, 604, 520, 26, 423, 815, 814, 461, 118, 441, 270, 396, 294, 534, 371, 87, 614, 843, 690, 693, 912, 32, 99, 913, 255, 723, 908, 865, 98, 359, 535, 438, 670, 349, 919, 674, 624, 662, 832, 519, 275, 279, 127, 902, 868, 835, 53, 746, 135, 931, 787, 334, 846, 122, 176, 549, 112, 827, 688, 429, 637, 776, 107, 682, 76, 383, 6, 276, 929, 206, 579, 333, 968, 312, 555, 518, 320, 279, 244, 642, 895, 709, 910, 669, 886, 240, 383, 886, 742, 369, 593, 785, 82, 924, 84, 311, 561, 954, 534, 560, 929, 449, 486, 434, 672, 727, 568, 424, 695, 529, 537, 744, 736, 322, 390, 47, 396, 998, 242, 191, 107, 453, 497, 920, 28, 772, 618, 83, 636, 697, 656, 41, 729, 757, 304, 179, 345, 461, 311, 643, 987, 456, 261, 163, 926, 701, 532, 686, 976, 986, 881, 69, 95, 305, 105, 456, 24, 362, 736, 521, 759, 823, 259, 485, 532, 659, 62, 105, 823, 409, 491, 927, 464, 237, 62, 181, 736, 718, 237, 116, 216, 467, 382, 215, 27, 246, 268, 442, 785, 636, 437, 88, 54, 23, 486, 845, 653, 467, 212 };
        MergeSort w = new MergeSort(counter, arr, 0, 999);

        Thread t = new Thread(w);

        t.start();
        try {
            t.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // for (int i = 0; i < 1000; i++)
        //     System.out.printf("%d ", arr[i]);

        for (int i = 0; i < 998; i++)
            if (arr[i+1] < arr[i])
                System.out.println("\nARRAY NOT SORTED!!!");

    }
}
